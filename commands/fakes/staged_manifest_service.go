// Code generated by counterfeiter. DO NOT EDIT.
package fakes

import (
	"sync"
)

type StagedManifestService struct {
	ShowStub        func(productID string) (string, error)
	showMutex       sync.RWMutex
	showArgsForCall []struct {
		productID string
	}
	showReturns struct {
		result1 string
		result2 error
	}
	showReturnsOnCall map[int]struct {
		result1 string
		result2 error
	}
	invocations      map[string][][]interface{}
	invocationsMutex sync.RWMutex
}

func (fake *StagedManifestService) Show(productID string) (string, error) {
	fake.showMutex.Lock()
	ret, specificReturn := fake.showReturnsOnCall[len(fake.showArgsForCall)]
	fake.showArgsForCall = append(fake.showArgsForCall, struct {
		productID string
	}{productID})
	fake.recordInvocation("Show", []interface{}{productID})
	fake.showMutex.Unlock()
	if fake.ShowStub != nil {
		return fake.ShowStub(productID)
	}
	if specificReturn {
		return ret.result1, ret.result2
	}
	return fake.showReturns.result1, fake.showReturns.result2
}

func (fake *StagedManifestService) ShowCallCount() int {
	fake.showMutex.RLock()
	defer fake.showMutex.RUnlock()
	return len(fake.showArgsForCall)
}

func (fake *StagedManifestService) ShowArgsForCall(i int) string {
	fake.showMutex.RLock()
	defer fake.showMutex.RUnlock()
	return fake.showArgsForCall[i].productID
}

func (fake *StagedManifestService) ShowReturns(result1 string, result2 error) {
	fake.ShowStub = nil
	fake.showReturns = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *StagedManifestService) ShowReturnsOnCall(i int, result1 string, result2 error) {
	fake.ShowStub = nil
	if fake.showReturnsOnCall == nil {
		fake.showReturnsOnCall = make(map[int]struct {
			result1 string
			result2 error
		})
	}
	fake.showReturnsOnCall[i] = struct {
		result1 string
		result2 error
	}{result1, result2}
}

func (fake *StagedManifestService) Invocations() map[string][][]interface{} {
	fake.invocationsMutex.RLock()
	defer fake.invocationsMutex.RUnlock()
	fake.showMutex.RLock()
	defer fake.showMutex.RUnlock()
	copiedInvocations := map[string][][]interface{}{}
	for key, value := range fake.invocations {
		copiedInvocations[key] = value
	}
	return copiedInvocations
}

func (fake *StagedManifestService) recordInvocation(key string, args []interface{}) {
	fake.invocationsMutex.Lock()
	defer fake.invocationsMutex.Unlock()
	if fake.invocations == nil {
		fake.invocations = map[string][][]interface{}{}
	}
	if fake.invocations[key] == nil {
		fake.invocations[key] = [][]interface{}{}
	}
	fake.invocations[key] = append(fake.invocations[key], args)
}
